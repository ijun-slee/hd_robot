/* Auto-generated by genmsg_cpp for file /home/slee/install_software/RCT_Source/ROS2OSC/msg/osc.msg */
#ifndef ROS2OSC_MESSAGE_OSC_H
#define ROS2OSC_MESSAGE_OSC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ROS2OSC
{
template <class ContainerAllocator>
struct osc_ {
  typedef osc_<ContainerAllocator> Type;

  osc_()
  : type()
  , into(0)
  , floato(0.0)
  , str()
  , as_you_like()
  {
  }

  osc_(const ContainerAllocator& _alloc)
  : type(_alloc)
  , into(0)
  , floato(0.0)
  , str(_alloc)
  , as_you_like(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  type;

  typedef int32_t _int_type;
    int32_t into;

  typedef float _float_type;
   float floato;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _str_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  str;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _as_you_like_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  as_you_like;


  typedef boost::shared_ptr< ::ROS2OSC::osc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ROS2OSC::osc_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct osc
typedef  ::ROS2OSC::osc_<std::allocator<void> > osc;

typedef boost::shared_ptr< ::ROS2OSC::osc> oscPtr;
typedef boost::shared_ptr< ::ROS2OSC::osc const> oscConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ROS2OSC::osc_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ROS2OSC::osc_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ROS2OSC

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ROS2OSC::osc_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ROS2OSC::osc_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ROS2OSC::osc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "11bd13c1effee5080e332b8c90da31f9";
  }

  static const char* value(const  ::ROS2OSC::osc_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x11bd13c1effee508ULL;
  static const uint64_t static_value2 = 0x0e332b8c90da31f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ROS2OSC::osc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ROS2OSC/osc";
  }

  static const char* value(const  ::ROS2OSC::osc_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ROS2OSC::osc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string type\n\
int32 into\n\
float32 floato\n\
string str\n\
string as_you_like\n\
\n\
";
  }

  static const char* value(const  ::ROS2OSC::osc_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ROS2OSC::osc_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.into);
    stream.next(m.floato);
    stream.next(m.str);
    stream.next(m.as_you_like);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct osc_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ROS2OSC::osc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ROS2OSC::osc_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "int: ";
    Printer<int32_t>::stream(s, indent + "  ", v.into);
    s << indent << "float: ";
    Printer<float>::stream(s, indent + "  ", v.floato);
    s << indent << "str: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.str);
    s << indent << "as_you_like: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.as_you_like);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROS2OSC_MESSAGE_OSC_H








