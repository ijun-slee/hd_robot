/* Auto-generated by genmsg_cpp for file /home/slee/install_software/RCT_Source/ROS2OSC/msg/ros2osc.msg */
#ifndef ROS2OSC_MESSAGE_ROS2OSC_H
#define ROS2OSC_MESSAGE_ROS2OSC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "osc.h"

namespace ROS2OSC
{
template <class ContainerAllocator>
struct ros2osc_ {
  typedef ros2osc_<ContainerAllocator> Type;

  ros2osc_()
  : osc_ip()
  , osc_port()
  , osc_address()
  , osc_messages()
  , as_you_like()
  {
  }

  ros2osc_(const ContainerAllocator& _alloc)
  : osc_ip(_alloc)
  , osc_port(_alloc)
  , osc_address(_alloc)
  , osc_messages(_alloc)
  , as_you_like(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _osc_ip_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  osc_ip;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _osc_port_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  osc_port;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _osc_address_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  osc_address;

  typedef std::vector< ::ROS2OSC::osc_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ROS2OSC::osc_<ContainerAllocator> >::other >  _osc_messages_type;
  std::vector< ::ROS2OSC::osc_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ROS2OSC::osc_<ContainerAllocator> >::other >  osc_messages;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _as_you_like_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  as_you_like;


  typedef boost::shared_ptr< ::ROS2OSC::ros2osc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ROS2OSC::ros2osc_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ros2osc
typedef  ::ROS2OSC::ros2osc_<std::allocator<void> > ros2osc;

typedef boost::shared_ptr< ::ROS2OSC::ros2osc> ros2oscPtr;
typedef boost::shared_ptr< ::ROS2OSC::ros2osc const> ros2oscConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ROS2OSC::ros2osc_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ROS2OSC::ros2osc_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ROS2OSC

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ROS2OSC::ros2osc_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ROS2OSC::ros2osc_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ROS2OSC::ros2osc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0fabd6f858d398b368ef6deb91493022";
  }

  static const char* value(const  ::ROS2OSC::ros2osc_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0fabd6f858d398b3ULL;
  static const uint64_t static_value2 = 0x68ef6deb91493022ULL;
};

template<class ContainerAllocator>
struct DataType< ::ROS2OSC::ros2osc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ROS2OSC/ros2osc";
  }

  static const char* value(const  ::ROS2OSC::ros2osc_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ROS2OSC::ros2osc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string osc_ip\n\
string osc_port\n\
string osc_address\n\
osc[] osc_messages\n\
string as_you_like\n\
\n\
================================================================================\n\
MSG: ROS2OSC/osc\n\
string type\n\
int32 int\n\
float32 float\n\
string str\n\
string as_you_like\n\
\n\
";
  }

  static const char* value(const  ::ROS2OSC::ros2osc_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ROS2OSC::ros2osc_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.osc_ip);
    stream.next(m.osc_port);
    stream.next(m.osc_address);
    stream.next(m.osc_messages);
    stream.next(m.as_you_like);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ros2osc_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ROS2OSC::ros2osc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ROS2OSC::ros2osc_<ContainerAllocator> & v) 
  {
    s << indent << "osc_ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.osc_ip);
    s << indent << "osc_port: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.osc_port);
    s << indent << "osc_address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.osc_address);
    s << indent << "osc_messages[]" << std::endl;
    for (size_t i = 0; i < v.osc_messages.size(); ++i)
    {
      s << indent << "  osc_messages[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ROS2OSC::osc_<ContainerAllocator> >::stream(s, indent + "    ", v.osc_messages[i]);
    }
    s << indent << "as_you_like: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.as_you_like);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROS2OSC_MESSAGE_ROS2OSC_H

